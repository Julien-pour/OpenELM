[
    {
        "fitness": null,
        "program_str": "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and string manipulation.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a number that, when squared, starts with the digits '123456789'."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, mathematical operations, and function composition in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to create a function that checks if a given string meets certain conditions related to the count of specific substrings."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation and counting substrings in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and checking for a specific condition on the elements of the list. It also uses list comprehension and modulo operation. The solution generates a list based on a specific pattern to satisfy the conditions of the puzzle.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to create a function that takes a list of integers and checks if the list is sorted in ascending order and contains all integers from 0 to 998. The solution function generates a list where each element is the remainder of (i+1) divided by 999."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting and comparison, as well as list comprehension in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for a specific condition using list comprehension.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if a given list of integers satisfies a specific condition. The solution involves generating a list based on a nested loop and passing it to the function to check."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and the count() method in Python. It also requires knowledge of nested loops and range() function."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to define a function f(s: str) that checks if a certain condition is met, and a function g() that generates a string based on a mathematical operation and finds a substring with the highest count in the generated string. The assertion checks if f(g()) returns True."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, mathematical operations, and set comprehension in Python. It tests the students' understanding of string slicing, counting substrings, and defining functions with specific conditions."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and list operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that takes a list of integers and returns a boolean value based on a comparison with a given string. The solution function generates a list of integers based on the index of characters in another string."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves list comprehension, string manipulation, and comparison operations in Python. It tests the student's understanding of list indexing and comparison techniques in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and list operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that takes a list of strings as input and returns True if the minimum and maximum values in the list are equal to the string representation of the length of the list."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, comparison of strings and integers, and the use of the min, max, and len functions in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')\ndef g():\n    return 123.456 + 3.1415\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Mathematical Operations",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to determine if the result of a mathematical operation satisfies a specific condition using string manipulation."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if the result of adding two numbers satisfies a condition based on string manipulation."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))\ndef g():\n    return [(2 ** i) for i in range(20)]\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if the sum of the first i elements in a list matches a specific formula for all i from 0 to 19. The solution generates a list of powers of 2 from 0 to 19 and checks if the function returns True for this list."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, summing elements in a list, and comparing the sum to a specific formula. The solution involves generating a list of powers of 2 using list comprehension and passing it to the function to check if it returns True."
    },
    {
        "fitness": null,
        "program_str": "def f(i: int) -> bool:\n    return len(str(i + 1000)) > len(str(i + 1001))\ndef g():\n    return -1001\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and string manipulation to compare the lengths of two strings.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a number that, when added to 1001, results in a number with a shorter length than when added to 1000."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how adding different numbers affects the length of the resulting number when converted to a string."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and list comprehension to check if the sum of all pairs of elements in the list is equal to a specific set.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that takes a list of integers and checks if the sum of all possible pairs of integers in the list matches a specific set of values."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves set comprehension and comparison to a predefined set of values."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for unique elements in the list.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to create a function that takes a list of integers as input and returns True if all elements are different from their adjacent elements and the list contains exactly 3 unique elements."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for uniqueness of elements in a list and the presence of exactly 3 unique elements."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and iteration over a list of strings.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if a given list of strings matches a specific pattern defined by the zip function."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how the zip function works in Python and how to compare tuples to check for a specific pattern."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str) -> bool:\n    return sorted(s) == sorted('Permute me true') and s == s[::-1]\ndef g():\n    s = sorted('Permute me true'[1:])[::2]\n    return \"\".join(s + ['P'] + s[::-1])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, sorting and ordering, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to create a string that is a palindrome and is an anagram of the phrase 'Permute me true'."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, sorting, and checking for palindromes and anagrams."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that takes a list of integers and returns a boolean value based on specific conditions. The solution function g returns a list of integers that satisfies the conditions of function f."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list indexing and comparison operations in Python. It also requires the student to correctly implement the conditions specified in function f."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, list operations, and set operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that takes a list of integers as input and returns True if the conditions specified in the function are met. The student also needs to implement a function g that generates a list of integers to be passed to function f, such that the assertion statement at the end of the code passes."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking conditions related to the elements in the input list and their properties. The solution function g generates a list that satisfies the conditions specified in function f."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(hands: List[int], target_angle=68) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 68):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves calculating the angles of the hour and minute hands of a clock and checking if the absolute difference between them matches a target angle or its complement."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of angles, loops, and conditional statements in Python to calculate the angles of the clock hands and check for the target angle."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Backtracking, Number Theory",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f(n) and g(), where f checks a specific condition on an input integer n and g iterates through integers to find the first one that satisfies the condition in f."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a loop that checks a condition on an integer n and a loop in the solution function g() that iterates through integers to find the first one that satisfies the condition in f(). The solution function g() returns the first integer that satisfies the condition in f()."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves geometry and coordinate manipulation to solve a combinatorial problem.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a set of unique coordinates within a grid, ensuring that no three points are collinear, and checking if a specific condition is met based on the generated coordinates."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of nested loops, assertions, itertools combinations, and mathematical concepts related to collinearity of points in a plane."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, iteration, and combination generation using itertools. It also includes conditional logic and assertion checks.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to find a combination of stamps from a given set of options that sum up to a target value, while also considering a maximum number of stamps allowed."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given combination of stamps satisfies certain conditions, such as the total sum being equal to the target value and the number of stamps not exceeding a maximum limit."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves geometric calculations and constraints to ensure that a set of rectangles form a perfect square. It also includes assertions to validate the input data. The solution generates a list of coordinates and side lengths for rectangles that form a perfect square when summed up.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list of lists as input and performs certain checks on the input list to determine if it satisfies certain conditions. The solution function g generates a specific list of lists that satisfies the conditions of function f."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, iteration, and conditional checks in Python. It also requires knowledge of list comprehension and mathematical calculations. The solution function g provides a specific list that satisfies the conditions of function f."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks a specific condition on a given input string, and a function g that finds a specific value in the input string to satisfy the condition in function f."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of string manipulation, counting characters in a string, and using list comprehension in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, mathematical operations, conditional logic, and sorting and ordering.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a number 'n' such that the square of 'n' contains all digits from 0 to 9 exactly once."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if the square of a number 'n' contains all digits from 0 to 9 exactly once. The function f(n) checks this condition, and the function g() iterates through numbers to find the required 'n'."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, and Exception Handling.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to create a string expression using only the characters '1', '8', '-', '+', '*', and '/' that evaluates to 63 and contains two '8's and one '1'."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the given characters to form a valid mathematical expression that evaluates to 63 with specific constraints on the number of '8's and '1's in the expression."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, mathematical operations, conditional logic, and evaluating expressions using the `eval()` function.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to create a string expression using only the characters '1', '8', '-', '+', '*', and '/' that evaluates to 63 and contains three occurrences of the digit '8' and one occurrence of the digit '1'."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves creating a mathematical expression using specific characters that evaluates to a specific value and satisfies certain conditions."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Backtracking, List Manipulation, and Algorithm Optimization.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a problem of pouring water between jugs with different capacities to reach a specific goal state."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list manipulation, loops, and conditionals in Python to solve the pouring water problem."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to understand the functions f and g, and use them to determine if the assertion statement is True or False."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and comparison, as well as understanding the logic within the functions f and g. The student needs to analyze the code to determine if the assertion statement is correct based on the functions provided."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves geometry and coordinate manipulation to cover a target area with given corners and dimensions.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list of corners and some parameters, and checks if the corners cover a specific target area. The solution function g generates the corners based on the parameters and checks if f returns True for those corners."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, sets, and assertions in Python. It also requires knowledge of function definitions and function calls with default parameters. The solution function g generates the corners based on the parameters and checks if the function f returns True for those corners."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation to check if the input list satisfies a certain condition based on a predefined list of trips. The solution function uses list comprehension to calculate the sum of elements in each sublist of trips and return a list of boolean values based on the condition 'sum(s) >= 2'. The assert statement checks if the puzzle function f returns True when applied to the solution function g.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that takes a list of boolean values and checks if the length of the list matches a predefined list of trips, and if the sum of each trip is greater than or equal to 2. The solution function g generates a list of boolean values based on the sum of each trip in a given list of trips."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, boolean values, list comprehension, and conditional statements in Python. It tests the student's understanding of list operations and boolean logic. The solution function g demonstrates list comprehension and boolean comparisons in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k = 6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if certain conditions are met based on a list of scores and a threshold value, and g calculates the number of scores that are greater than or equal to the threshold value. The puzzle requires understanding of list comprehension, conditionals, and function composition in Python."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given solution function g meets the conditions specified in function f. Function f checks if all scores before a certain index are greater than or equal to a threshold value, and all scores after that index are less than the threshold value. Function g calculates the number of scores that are greater than or equal to the threshold value. The assert statement at the end ensures that f(g()) returns True."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that generates a string with a dot between each consonant in a given string, excluding vowels. The solution function then checks if the generated string satisfies certain conditions based on the input string."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, iteration, and assertion checks. It tests the student's understanding of string operations and control flow in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as List Manipulation, Conditional Logic, and Set Operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list of squares and checks if they cover a specific target area in a grid. The solution function g generates a list of squares based on the dimensions of the grid and ensures that the target area is covered by these squares."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how the function f checks if a list of squares covers a target area in a grid, and how the function g generates squares to satisfy this condition. It requires knowledge of list comprehension, loops, and conditional statements in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves comparing two strings with different conditions based on the value of n. The solution function g() compares the strings and returns a value based on the comparison. The puzzle function f() checks if the comparison result from g() satisfies certain conditions."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string comparison and conditional checks based on the value of n. The solution function g() returns a value based on the comparison of two strings, and the puzzle function f() checks if the result from g() meets the specified conditions."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str, word='silon') that checks if the input string s matches a specific pattern defined by the word 'silon'. The solution function g(word = 'silon') generates a modified version of the word 'silon' by capitalizing the first letter. The puzzle tests whether the solution function g satisfies the condition of the function f."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and conditional checks in Python. It tests the understanding of string indexing, comparison, and function composition. This puzzle can be used to teach Python programming concepts related to strings and functions."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to understand and analyze a function f that compares characters in a string and a function g that manipulates the input string to remove consecutive duplicate characters. The goal is to ensure that the output of function g satisfies the conditions set by function f."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, iteration, and comprehension in Python. Students need to understand how the functions f and g interact and how to manipulate strings to meet the conditions of f."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation to solve a linear algebra problem.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list of integers and a default list of lists of integers as input. The function checks if the sum of each column in the default list plus the corresponding element in the input list equals zero. The solution function g calculates the negation of the sum of each column in the default list."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, summing elements in lists, and checking conditions using all(). The solution function g uses list comprehensions and negation to calculate the required sums."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list comprehension. It does not explicitly involve any of the other topics listed.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to understand how to define functions with default parameters and use list comprehension to calculate a sum. The student needs to ensure that the function g() returns the correct value to satisfy the condition in function f()."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, default parameters, list comprehension, and function invocation. It tests the student's ability to correctly implement a function that satisfies a given condition."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and iterative algorithms.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to understand the given functions f and g, and determine if g is a solution to f by checking if f(g()) returns True."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding loops, assertions, and comparison operators in Python. The student needs to analyze the functions f and g to determine if g is a solution to f based on the given conditions."
    },
    {
        "fitness": null,
        "program_str": "def f(res: int, m=22262059435814874058, n=6) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations, Conditional Logic, and Function Calls.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if the result of another function g satisfies a certain condition after some operations on a given number."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of Python functions, loops, conditional statements, and arithmetic operations."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a certain condition is met based on a list of pairs, and g calculates a value based on the same list of pairs. The goal is to find a pair of values that satisfies the condition in f."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding the logic of the f function which checks if a certain condition is met based on the pairs provided. The g function calculates a value based on the pairs, and the goal is to find a pair of values that satisfies the condition in f."
    },
    {
        "fitness": null,
        "program_str": "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to understand and implement a function that checks if the input string has more uppercase letters than lowercase letters, and returns True if the condition is met."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves counting the number of uppercase letters in a given string and comparing it to the length of the string to determine if the string should be converted to all uppercase or all lowercase. The solution function g() correctly implements this logic and returns the modified string based on the condition."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(inds: List[int], string='gteliikeenGgqIHent') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string = 'gteliikeenGgqIHent'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function g that finds the indices of characters in a given string that spell out the word 'intelligent'. The function f checks if the indices are in sorted order and if the characters at those indices form the word 'intelligent'."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, iteration, and list operations in Python. It tests the student's understanding of loops, string indexing, and list comprehension."
    },
    {
        "fitness": null,
        "program_str": "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, conditional logic, and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to understand the functions f and g, and use them to solve a challenge involving counting the occurrences of '4' and '7' in a number."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number meets certain conditions based on the count of '4' and '7' in the number. The solution function g generates a number based on the input number, and the puzzle is solved when f(g()) returns True."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, target='rechawewivetextovy', reverse=True) -> bool:\n    return (s[::-1] == target) == reverse\ndef g(target = 'rechawewivetextovy', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to understand string manipulation in Python and boolean logic. The student needs to create a function g that reverses the target string if reverse is True, and appends 'x' to the target string if reverse is False. The function f then checks if the result of g is equal to the target string in reverse order based on the value of reverse parameter."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, understanding of slicing in Python, boolean logic, and function composition. It tests the student's ability to create a function that meets specific criteria and to understand how the functions interact to produce the desired result."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function g(a, d) that returns a string with 'a' repeated 'a' times and 'd' repeated 'd' times. The function f(s, a, d) checks if the input string 's' contains 'a' repeated 'a' times, 'd' repeated 'd' times, and has a length equal to the sum of 'a' and 'd'. The assert statement checks if f(g()) returns True."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "This puzzle is a good exercise to test the student's understanding of string manipulation, function definition, and function invocation in Python. It also reinforces the concept of function composition and parameter passing in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check for unique digits in a number, as well as mathematical operations to generate a list of numbers within a range. It also includes conditional logic to filter the numbers based on a condition. Finally, it uses set operations to check for uniqueness in the generated list of numbers.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function f that takes a list of integers and checks if each integer in the list has unique digits and falls within a specified range. The function g generates a list of integers within the specified range that have unique digits. The puzzle is to ensure that function f returns True when applied to the output of function g."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, set operations, and range generation in Python. It also tests the student's ability to define functions with default arguments and use assertions for validation."
    },
    {
        "fitness": null,
        "program_str": "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and list comprehension.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to understand the use of list comprehension and the sum function in Python to calculate a sum based on a condition."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if the sum of a list of numbers based on a condition is equal to a given total, and defining a function g that calculates this sum. The assert statement checks if f(g()) returns True."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation to achieve a specific target value. It does not directly relate to other topics such as recursion, dynamic programming, or graph theory.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that takes a list of pairs of integers and a target value, and checks if the difference between the second and first element in each pair is at least 2. The function g generates a list of pairs of integers based on the target value. The puzzle is to ensure that f(g()) returns True for a specific target value."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, iteration, and conditional statements in Python. It also requires the student to correctly implement the logic to check the difference between elements in pairs. The solution function g generates the input list based on the target value, and the challenge is to ensure that f correctly evaluates this list to return True."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to understand string manipulation and mathematical operations in Python to determine if a given string satisfies a specific condition based on a mathematical calculation."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves converting numbers to strings, manipulating strings, and performing mathematical calculations to check if a condition is met."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, conditional logic, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of strings representing states, a start state, a combo state, and a target length. The function checks if the list of states can reach the combo state from the start state by changing one digit at a time. The solution function g generates a sequence of states to reach the combo state from the start state."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, string operations, and conditional logic in Python. It also requires understanding of loops and mathematical operations to generate the sequence of states."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and mathematical operations to solve the algorithmic challenge.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a certain condition is met based on a list of states, a start value, a combo value, and a target length. The solution function g generates a list of values based on the start and combo values until a certain condition is met."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves manipulating lists of integers and checking conditions based on the differences between elements. It requires understanding of list comprehension, zip function, and modulo operations in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and permutations and combinations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a string and checks if the string can be transformed into a target string using a specific permutation. The solution function g generates a string that can be transformed into the target string using the inverse permutation. The assertion at the end checks if applying g to f results in True."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of permutations in Python. It requires the student to implement the inverse permutation function to solve the challenge."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking conditions based on the elements in the lists.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of lists meets certain conditions based on the input parameters and constraints provided in the functions f and g."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding list manipulation, set operations, list comprehensions, and assertions in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(seq: List[int], n=10000, length=5017) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 10000, length = 5017):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to create a function g that generates a list of integers based on the input parameters n and length, such that the function f returns True when applied to the generated list."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list meets certain conditions based on the input parameters and the elements in the list. The solution function g generates a list that satisfies the conditions specified in the puzzle function f."
    },
    {
        "fitness": null,
        "program_str": "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves finding a subsequence in a list that satisfies certain conditions.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to understand the f and g functions, and how to use them to find the correct start index in a sequence to satisfy the given conditions."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given start index in a sequence satisfies certain conditions based on the sum of elements in a subsequence. The solution function g uses a lambda function to find the start index that minimizes the sum of elements in the subsequence."
    },
    {
        "fitness": null,
        "program_str": "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the starting index of a subsequence in a given sequence such that the sum of the subsequence is greater than or equal to a specified lower bound."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list slicing, summing elements of a subsequence, and using the max function with a lambda function to find the starting index of the subsequence."
    },
    {
        "fitness": null,
        "program_str": "def f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k = 10, lower = -8326797433194240, seq = [49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the product of a subsequence of a given sequence is greater than a specified lower bound, and g finds the starting index of the subsequence that maximizes the product."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions, use loops, calculate products of subsequences, and find the index that maximizes a function. It also requires understanding how to use default arguments and assert statements in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list operations, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that takes a list of integers and checks if the list meets certain conditions. The student also needs to implement a function g that generates a list of integers based on the given total and number of elements. The solution function g should return a list that satisfies the conditions of function f."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, conditions, and arithmetic calculations in Python. It tests the student's ability to generate a list based on a given total and number of elements, and then check if the generated list meets specific conditions."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of rotations and a target string as input, and checks if applying the rotations to the alphabet string results in the target string. The function g generates a list of rotations to transform the alphabet string into the target string."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves manipulating strings and lists in Python to achieve a specific transformation. It tests the student's understanding of string manipulation and list operations in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dynamic programming and list manipulation.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of bills satisfies certain conditions and then finding a solution using dynamic programming to meet those conditions."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of list manipulation, condition checking, and dynamic programming in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, set operations, list manipulation, and algorithm optimization.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of numbers satisfies certain conditions, and a function g that generates a list of numbers based on given options. The solution g generates a list of numbers that meets the conditions specified in function f."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, set operations, and algorithmic thinking to generate a list of numbers that satisfies the conditions specified in function f."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and functions.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(x) that checks if a quadratic equation with given coefficients has a root within a small tolerance. The solution function g() calculates the root of the quadratic equation using the quadratic formula and returns it."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding quadratic equations, roots, and the quadratic formula in Python. It tests the student's ability to define functions, work with coefficients, and solve equations."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to solve a quadratic equation and check the roots satisfy a condition.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list of roots and coefficients as input and checks if a certain condition is met. The solution function g calculates the roots of a quadratic equation using the coefficients provided and returns them in a list. The assertion checks if f(g()) returns True."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding quadratic equations, roots, and coefficients. It tests the student's ability to implement a function to check a condition based on the roots and coefficients, as well as calculate the roots of a quadratic equation."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if the sum of the digits in a given number is equal to a specific value. The solution function then calculates a specific number based on the given value."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with string manipulation, integer conversion, and arithmetic operations in Python. It tests the student's understanding of list comprehension, summing elements in a list, and string concatenation."
    },
    {
        "fitness": null,
        "program_str": "def f(z: float, v=9, d=0.0001) -> bool:\n    return int(z * 1 / d % 10) == v\ndef g(v = 9, d = 0.0001):\n    return v * d\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Conditional Logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a certain condition is met based on the input parameters, and a function g that returns a value based on the input parameters. The goal is to ensure that f(g()) returns True."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of function composition and parameter passing in Python. Students need to understand how the functions f and g interact to satisfy the condition in the assert statement."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that generates a list of numbers based on given parameters, and then check if the generated list satisfies certain conditions."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list generation using range() function in Python and checking conditions on the generated list."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to understand a given function f that takes a list of integers as input and returns a boolean value based on a mathematical condition. The solution function g takes no input and returns a list of integers. The challenge is to find the correct values for a, b, c, and d in function g such that f(g()) returns True."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding mathematical operations, list indexing, and function calls in Python. Students need to manipulate the values of a, b, c, and d in function g to satisfy the condition in function f."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to understand the given functions f and g, and determine if the assertion f(g()) == True holds true based on the conditions specified in the functions."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding the conditions in the functions f and g, and applying them to check if the assertion is true."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and function definition.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(x) and g(a, b), where f checks if a given integer x satisfies a specific condition based on the values of a and b, and g calculates a value for x based on the values of a and b. The puzzle requires finding the correct value of x that satisfies the condition in f when passed through g."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithmic challenge where the solution function g calculates a value for x based on the input parameters a and b, and the function f checks if the calculated value of x satisfies a specific condition. The puzzle is suitable for teaching Python programming concepts such as function definition, parameter passing, and conditional statements."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list operations, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function f(x) that takes a list of integers and checks if the length of the list is equal to a given value, the sum of the list is equal to a given value, and all elements in the list are greater than 0. The solution function g() generates a list of integers based on the given values of n and s that satisfy the conditions for function f."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, condition checking, and function implementation in Python. It also requires the student to understand how to generate a list based on given conditions."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as List Manipulation, Conditional Logic, Set Operations, and Brute Force Search.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function g that generates a list of integers based on certain conditions, and the function f checks if the generated list meets specific criteria."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of integers with specific properties and then checking if the generated list satisfies certain conditions. The student needs to understand list manipulation, arithmetic operations, and conditional statements to solve this puzzle."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, List operations",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f(x) that checks if a given string x is equal to a predefined list of characters s up to a certain length n. The solution function g() generates a string by joining characters from the predefined list s up to length n and returns it."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is focused on string manipulation and list comprehension in Python. It tests the student's understanding of string comparison and list iteration."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, conditional logic, and set operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks certain conditions on a list of integers, and a function g that generates a list of integers based on certain calculations. The goal is to ensure that function f returns True when applied to the output of function g."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves list manipulation, condition checking, and arithmetic calculations in Python. It tests the student's understanding of list comprehension, set operations, and loop logic."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking a condition based on the sorted sum. The solution generates a list of integers and a target value to satisfy the condition in the puzzle.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f(x: List[int], t=364928431, n=1088) that checks if the sum of the elements in the input list x exceeds a threshold t before reaching a certain index n. The solution function g(t, n) generates a list of n+1 elements with all values as 1 except the last element which is set to t. The puzzle is to ensure that f(g()) returns True."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, sorting, and conditional statements in Python. It also tests the student's ability to write functions with default arguments and use of assert statements for testing."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, s1='t', s2='qu', count1=86, count2=83) -> bool:\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:])\ndef g(s1 = 't', s2 = 'qu', count1 = 86, count2 = 83):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string meets certain conditions, and a function g that generates a string based on input parameters. The goal is to ensure that f(g()) returns True."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the students' understanding of string manipulation, function parameters, and condition checking in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, List Comprehension",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to understand how to check if a list of substrings can be found in a given string in a specific order, and then generate a new string based on the substrings provided."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension, string manipulation, and understanding of how to check for substrings in a given string."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str, substrings=['foo', 'bar', 'baz']) that checks if all substrings and their reverse are present in the input string s. The solution function g(substrings=['foo', 'bar', 'baz']) constructs a string by concatenating the substrings and their reverse. The assertion checks if f(g()) returns True."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, list comprehension, and checking conditions. It can be used to teach students about string operations, list manipulation, and function composition in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1\ndef g(strings = ['cat', 'dog', 'bird', 'fly', 'moose']):\n    return sorted(strings)[-2]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and list operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the second largest string in a list of strings and checking if it exists in the list."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, sorting, and comparison in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and sorting and ordering topics.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a string in a list of strings that is the second smallest when sorted in ascending order, and then checking if the reverse of that string is present in the list."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, list sorting, and list comprehension in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to understand string slicing in Python and how to compare two strings."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given string matches a specific substring of a target string. The solution function g returns a substring of the target string based on the provided length. The assertion at the end checks if f(g()) returns True."
    },
    {
        "fitness": null,
        "program_str": "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Brute Force Search",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given substring appears a certain number of times in a given string, and a function g that iterates through all possible substrings of the string to find one that meets the count criteria."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, iteration, and understanding of function interactions in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that checks if a given string has balanced parentheses and contains a specific substring. The solution function g generates a string with balanced parentheses based on the input string."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, counting characters, and checking for balanced parentheses. The solution function g demonstrates how to generate a string with balanced parentheses based on the input string."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Brute Force Search, Set Operations, Permutations and Combinations, and Importing Modules (Itertools).",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list of squares and dimensions m and n, and checks if certain conditions are met. The solution function g generates permutations of indices and checks if the conditions are satisfied."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, set operations, assertions, and permutations in Python. It also requires knowledge of indexing and tuple unpacking."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves backtracking and algorithm optimization to solve the Knight's Tour problem using Warnsdorff's heuristic. It also includes sorting and ordering to check if the tour is valid.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given tour is valid based on certain conditions, and a function g that generates a tour using Warnsdorff's heuristic algorithm. The puzzle requires students to understand the tour validation criteria and implement the tour generation algorithm."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a combination of algorithmic understanding and Python programming skills. It can be used to teach students about tour validation and heuristic algorithms in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Backtracking, Recursion, Brute Force Search, and Algorithm Optimization.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a game where the player and a bot take turns removing objects from heaps. The goal is for the player to make a move that leads to a winning state, while the bot tries to prevent this by making optimal moves. The player wins if all heaps are empty at the end of their turn."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves implementing a game strategy where the player needs to make moves to reach a winning state while the bot tries to prevent this. The solution function g() implements the player's strategy to win the game by making optimal moves."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06\ndef g():\n    return [1 / 3] * 3\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if a list of probabilities sums up to 1 and if the maximum difference between any two probabilities is less than a threshold.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f(probs: List[float]) that checks if the sum of probabilities in a list is approximately equal to 1 and if the maximum difference between any two probabilities in the list is less than a small threshold. The solution function g() returns a list of three equal probabilities that sum up to 1."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, mathematical calculations, and assertions in Python. It also tests the student's ability to implement a function that checks conditions on a list of probabilities."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "Graph Theory (paths, edges, vertices)",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of edges forms a triangle in a graph based on certain conditions."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of graph theory concepts and list manipulation in Python to check if a given set of edges forms a triangle."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "The puzzle involves graph theory (paths, edges, vertices) and backtracking.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given path is valid based on a list of edges, and finding a path that covers all nodes in the graph represented by the edges."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of graph traversal and path validation in Python. It also involves using dictionaries to store paths in a graph."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "Graph Theory (paths, edges, vertices)",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given path in a graph is valid based on a set of edges. The goal is to determine if the path is of even length."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given path in a graph is valid based on a set of edges, and the function g generates paths in the graph. The solution g generates paths in the graph and ensures that the path is of even length. The assert statement at the end checks if the solution g is correct for the puzzle f."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "The puzzle involves graph theory, backtracking, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given path in a graph is valid based on a set of edges. The function f checks if the path is valid, and the function g generates the path based on the edges provided."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves graph traversal and checking if a path is valid in the graph. It requires understanding of lists, dictionaries, loops, and conditional statements in Python. This puzzle can be used to teach Python programming concepts related to graph traversal and validation of paths in a graph."
    },
    {
        "fitness": null,
        "program_str": "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic to solve a challenge related to matching characters in a ring structure.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f defines an algorithmic challenge related to manipulating a given ring string, and g provides a solution to the challenge by finding a specific position in the ring string. The solution is validated by asserting that f(g()) returns True."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of string manipulation, dictionaries, loops, and conditional statements in Python. It challenges students to analyze and manipulate the given ring string to find the correct position based on certain conditions."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as recursion, number theory (gcd), set operations, and backtracking.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, f and g, where f defines an algorithmic challenge related to number theory and list manipulation, and g provides a solution to the challenge. The goal is to ensure that the solution g satisfies the conditions specified in the challenge function f."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of number theory, list comprehension, recursion, and algorithmic thinking. It requires understanding of functions, loops, sets, and assertions in Python. The challenge function f checks for certain conditions in a list of numbers, while the solution function g generates a list of numbers that satisfy those conditions."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, recursion, and set operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list of indices and a starting value a0, and checks if certain conditions are met. The solution function g generates a list of indices based on a starting value, ensuring that the conditions in f are satisfied."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding the algorithmic challenge of generating a list of indices based on a starting value and checking if specific conditions are met. It requires knowledge of loops, conditionals, and set operations in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that takes a list of integers and a number n as input. The function checks if the length of the list is equal to n and if a specific condition is met for each element in the list. The student also needs to implement a function g that generates a list based on the input n. The puzzle is to ensure that the function f returns True when applied to the output of function g."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, indexing, and list comprehension in Python. It also requires the student to grasp the concept of function composition and assertion testing."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Binary Operations (bitwise shifting, AND, OR) and Algorithm Optimization.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves implementing a function f that checks if a specific condition is met for a list of integers, and then implementing a solution function g that uses Gaussian elimination to decode vectors and solve the condition."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves bitwise operations, Gaussian elimination, and checking if a condition is met for a list of integers."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves bitwise operations, brute force search, randomization, and probability and statistics.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a certain condition is met based on a list of integers and a set of vectors. The solution function g uses a brute force approach to find a solution that satisfies the condition set by f."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves bitwise operations, list comprehension, random number generation, and a brute force approach to find a solution. It requires understanding of bitwise manipulation and algorithmic thinking."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and number theory (finding the greatest common divisor).",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the greatest common divisor (GCD) of two numbers and checking if it satisfies certain conditions."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the GCD of two numbers using the Euclidean algorithm and checking if the result meets specific criteria."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and recursion.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the greatest common divisor (GCD) of a list of numbers and checking if the GCD is greater than or equal to a specified lower bound."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the greatest common divisor (GCD) of a list of numbers using a specific algorithm and checking if the result meets a certain condition."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and number theory.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the greatest common divisor (GCD) of two numbers and checking if a given number satisfies certain conditions based on the GCD."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the greatest common divisor (GCD) of two numbers and using it to check if a given number meets specific criteria."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, recursion, and number theory.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given number n satisfies certain conditions based on a list of numbers and an upper bound. The solution function g() calculates a value based on the list of numbers and an upper bound, and the puzzle is solved if f(g()) returns True."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number satisfies certain conditions based on a list of numbers and an upper bound. The solution function calculates a value based on the list of numbers and an upper bound, and the puzzle is solved if the conditions are met."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, set operations, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the sum of squares of numbers in a list is equal to a given number, and g generates a list of numbers whose sum of squares equals the given number."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of list comprehension, dictionary comprehension, and iteration. It also requires understanding of mathematical operations like squaring numbers and checking for sums of squares."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function f that takes a list of integers and a parameter k, and checks if certain conditions are met based on the elements of the list. The solution function g generates a list of integers that satisfies the conditions of function f."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, loops, and conditions in Python. It also requires understanding of list manipulation and mathematical operations. The solution function g generates a list that satisfies the conditions of function f."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and number theory, specifically the use of the pow function and checking if a certain condition holds true. It also involves understanding modular arithmetic and the Fermat's little theorem. The solution involves finding a specific number that satisfies the condition in the puzzle.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(n) that checks if 2^n modulo n is equal to 3. The solution function g() returns a specific number, and the assertion checks if f(g()) returns True."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding the pow() function in Python, modulo operation, and how to write a solution function that satisfies the condition of f(g()) == True."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Probability and Statistics, Importing Modules (Itertools, etc.)",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating random numbers and calculating probabilities to determine if a certain condition is met. The solution iterates through different values to find the best one that satisfies the condition."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding probability calculations and iterating through values to find the best solution. It requires knowledge of random number generation and probability concepts in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves probability and statistics concepts along with mathematical operations. It also includes iterative calculations and comparison operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves calculating probabilities and checking if the calculated probability matches a target probability within a certain threshold."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of probability calculations and loops in Python. It involves calculating probabilities based on given conditions and checking for a specific target probability."
    },
    {
        "fitness": null,
        "program_str": "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to understand string manipulation in Python. They need to determine if adding a specific string to another string results in a given target string."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if adding a specific string to another string results in a target string. The solution function g extracts a substring from the target string based on the lengths of the input strings provided. The assert statement checks if the solution function g satisfies the condition of the puzzle function f."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation and Conditional Logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that generates a string of 'a' characters of a specified length, and another function that checks if the length of the generated string is equal to a given number."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of function definitions, string manipulation, and function invocation in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and exception handling.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list of integers and two strings as input, and checks if a specific slicing operation on one of the strings matches the target string. The solution function g uses itertools.product to generate all possible combinations of indices for slicing the string and returns the indices that satisfy the condition in function f."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding slicing operations in Python strings and using itertools.product to generate combinations of indices. It also requires handling exceptions for invalid index values. This puzzle can be used to teach Python to master's students in CS as it covers string manipulation, list operations, and exception handling."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    return big_str.index(s) == index\ndef g(big_str = 'fatextemedyrotichipicecojon', index = 24):\n    return big_str[index:]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and indexing operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to understand how to use the index method on strings in Python and how to compare the result to a given index value."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the index method to find the position of a substring within a larger string and comparing it to a specified index value. The solution function g returns a substring starting from a given index in the big_str. The assert statement checks if the puzzle function f returns True when applied to the solution function g."
    },
    {
        "fitness": null,
        "program_str": "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to understand how the index method works in Python and how to manipulate strings using ord and chr functions."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves finding the index of a substring in a given string and then generating a new string based on certain conditions. The solution uses a while loop to find a character not present in the substring and then creates a new string using that character and the given substring."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function g that iterates over a string 'a' and checks if a substring of length 'length' is present in string 'b'. The function f checks if the output of function g satisfies certain conditions."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and conditional checks, which are fundamental concepts in Python programming. It also requires understanding of function parameters and return values."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations, Permutations and Combinations",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that generates all possible substrings of a given string and checks if a list of substrings satisfies certain conditions."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with string manipulation, sets, and list comprehension in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to understand the functions f and g, and use them to check if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given string meets certain conditions based on the count of a substring and the length of the string. The solution function g generates a string based on the provided parameters, and the puzzle function f checks if the conditions are satisfied."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, List Operations",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function that splits a string into parts and then joins them back together to form the original string."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, slicing, and joining operations in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that checks if a list of strings can be joined using a separator to form a specific string, and that none of the strings in the list contain the separator. The solution function g splits a given string using a specified separator and returns a list of strings."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, list operations, and understanding of the join and split methods in Python. It also tests the student's ability to write functions that meet specific criteria."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to List Operations, Set Operations, and Mathematical Operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that checks for duplicates in a list of integers. The solution function creates a list with a specified number of duplicates and returns it."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, set operations, and function arguments in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation and searching for a specific element in a list. It also includes the concept of indexing and comparison.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function that finds the index of a target element in a list and then checks if the element at that index is equal to the target."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list indexing and the index method in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, indexing, and comparison operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the index of a target value in a list and checking if the value at that index is equal to the target value and the index is less than 0."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list indexing, comparison, and function composition in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, iteration, exception handling, and assertion testing.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list of integers and checks if a specific sublist matches a target sublist. The solution function g iterates through all possible combinations of indices to find the sublist that matches the target sublist."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves list slicing and iteration through all possible combinations of indices. It tests the student's understanding of list operations and iteration in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=93252338) -> bool:\n    return -x == a\ndef g(a = 93252338):\n    return - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to understand function calls and parameter passing in Python. The student needs to determine the value of 'x' that makes the assertion true."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a function f that checks if the negative of the input parameter is equal to a given value. The function g returns the negative of a given value. The student needs to understand how to pass parameters and call functions to make the assertion true."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to understand the concept of function parameters and return values in Python. The student needs to determine the correct value to return from function g in order to satisfy the condition in function f."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining two functions, f and g, where f checks if the sum of a parameter and a default value equals another default value. The student needs to find the correct value to return from function g to make the assertion in the puzzle pass."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to understand function parameters and return values in Python. The student needs to determine if the function g() correctly solves the challenge defined in function f()."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function parameters, return values, and how to check if a solution function correctly solves a challenge function in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to understand default function arguments and function composition in Python."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f with default arguments and checking if the function g, which returns the difference between the default arguments, satisfies the condition in f."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to determine if a given mathematical expression is true based on the values of a and b provided in the functions."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how the mathematical expression in function f is evaluated based on the values of a and b. The solution function g should return the result of a divided by b."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a specific mathematical condition is met, and a function g() that iterates through a range of values to find a solution that satisfies the condition in f(n). The assert statement at the end verifies if the solution returned by g() satisfies the condition in f(n)."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic arithmetic operations and iteration to find a solution that satisfies a given condition. It can be used to teach students about function definitions, mathematical operations, and iteration in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a\ndef g(a = -3411193412414137, b = -9070455318026063):\n    return a * b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to understand the concept of function composition and parameter passing in Python. The student needs to determine the correct values of 'a' and 'b' such that the function 'g' returns the correct result for function 'f'."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how function composition works in Python and how default parameter values are used. The student needs to find the correct values of 'a' and 'b' such that the function 'g' returns the correct result for function 'f'."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the square root of a given number and checking if the square of the result is equal to the given number."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate square roots in Python and using them to verify a condition."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "Given a function f(x) that checks if the absolute difference between x squared and a is less than 10^(-3), and a function g() that returns the square root of a, the puzzle requires finding the value of a such that f(g()) returns True."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function composition and mathematical operations in Python, specifically squaring and square rooting. It also tests the understanding of function parameters and return values."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a value of x that satisfies a specific condition involving a given constant 'a'. The solution function g returns the negative square root of the constant 'a'."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding mathematical operations in Python, specifically exponentiation and comparison. It also requires knowledge of function definitions and function calls in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str) that checks if the input string concatenated with 'Hello ' is equal to 'Hello world'. The solution function g() returns the string 'world' and the assertion checks if f(g()) returns True."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple string manipulation and comparison task that tests the student's understanding of string concatenation and equality comparison in Python."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to reverse the string 'world' and concatenate it with 'Hello' to check if it equals 'Hello world'."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of string slicing in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3\ndef g():\n    return [1, 2]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Conditional Logic.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function g() that returns a list of two integers, and the function f(x) checks if the list has exactly two elements and their sum is equal to 3."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple one that tests the student's understanding of list manipulation and function definition in Python."
    },
    {
        "fitness": null,
        "program_str": "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of 1000 strings where each string contains 'a' repeated (i+2) times followed by a single 'b'. The puzzle function f checks if the list meets two conditions: all strings are unique and each string has more 'a's than 'b's."
        ],
        "interestingness_f": [
            null
        ],
        "interestingness_g": [
            null
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves list comprehension, string manipulation, and understanding of set operations and all() function in Python."
    }
]